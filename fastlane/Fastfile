# update_fastlane

default_platform(:ios)

platform :ios do
  before_all do |lane, options|
    app_identifiers = [
      "relevant.fruit.zeplin",
      "relevant.fruit.zeplin.NotificationService"
    ]

    produce(
      app_identifier: "relevant.fruit.zeplin",
      app_name: "Zeplin",
      skip_itc: true,
      enable_services: {
        push_notification: "on"
      }
    )

    if is_ci
      setup_ci
      match(app_identifier: app_identifiers, readonly: true)
    else
      match(app_identifier: app_identifiers)
    end
  end

  lane :certificates do
    match(app_identifier: ["relevant.fruit.zeplin", "relevant.fruit.zeplin.NotificationService"])
  end

  lane :build do
    get_push_certificate
    cocoapods
    analyze_commits(match: "*")
    next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]

    increment_version_number(version_number: next_version)
    increment_build_number
    commit_version_bump(xcodeproj: "zeplin.xcodeproj")

    gym(scheme: "zeplin",
      export_method: "app-store",
      silent: true,
      export_xcargs: "-allowProvisioningUpdates",
      workspace: "zeplin.xcworkspace",
      xcargs: "-parallelizeTargets",
      configuration: "Release")

    changelog = conventional_changelog(title: "Zeplin Client", format: 'plain')
    testflight(changelog: changelog, skip_submission: true)

    post_deploy
    inform_sentry
  end

  desc "Generates release notes for slack and create the next tag"
  lane :post_deploy do |options|
    notes = conventional_changelog(title: "Zeplin", format: "slack")
    markdownChangelog = conventional_changelog(title: "Zeplin", format: "markdown")
    add_git_tag(tag: "ios/#{SharedValues::VERSION_NUMBER}/#{SharedValues::BUILD_NUMBER}", message: markdownChangelog)
    push_to_git_remote
    slack(message: notes)
  end

  desc "Upload DSYM and release on Sentry"
  lane :inform_sentry do
    current_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    sentry_upload_dsym(
      project_slug: 'zeplin',
      dsym_path: '../Zeplin.dSYM.zip',
    )

    sentry_create_release(
      version: current_version,
      app_identifier: bundle_identifier,
      finalize: true
    )

    sentry_set_commits(
      version: current_version,
      app_identifier: bundle_identifier,
      auto: true,
      clear: false,
      commit: "$VERSION"
    )
  end

  desc "Release application to AppStore"
  lane :release do
    sync_code_signing(type: "appstore")  # see code signing guide for more information
    build_app(scheme: "MyApp")
    upload_to_app_store                  # upload your app to App Store Connect
    slack(message: "Successfully uploaded a new App Store build")
  end
end
